<?xml version="1.0"?>
<root>
  <item>
    <name>PC Application Key to Control or Escape</name>
    <appendix>PC Application Key acts as Control or acts as Escape when not used as a modifier.</appendix>
    <identifier>private.pc_application_to_escape</identifier>
    <autogen>
      __KeyOverlaidModifier__
      KeyCode::PC_APPLICATION,
      KeyCode::CONTROL_L,
      KeyCode::ESCAPE
    </autogen>
  </item>
  <item>
    <name>Control_L+Space to Command+Space</name>
    <appendix>Aliases Control+Space as Command+Space for use with Spotlight, Alfred.</appendix>
    <identifier>private.control_l_space_to_command_l_space</identifier>
    <autogen>
      __KeyToKey__
      KeyCode::SPACE, ModifierFlag::CONTROL_L,
      KeyCode::SPACE, ModifierFlag::COMMAND_L
    </autogen>
  </item>
  <item>
    <name>Command+Bracket to Command+Shift+Bracket</name>
    <appendix>Aliases Command+Bracket as Command+Shift+Bracket for common tabbable apps.</appendix>
    <identifier>private.shortcut_command_shift_bracket</identifier>
    <only>TERMINAL,GOOGLE_CHROME,FIREFOX,SAFARI,OPERA,SUBLIMETEXT</only>
    <!-- Alias for Bracket_L -->
    <autogen>
      __KeyToKey__
      KeyCode::BRACKET_LEFT, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND | ModifierFlag::NONE,
      KeyCode::BRACKET_LEFT, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L
    </autogen>
    <!-- Alias for Bracket_R -->
    <autogen>
      __KeyToKey__
      KeyCode::BRACKET_RIGHT, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND | ModifierFlag::NONE,
      KeyCode::BRACKET_RIGHT, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L
    </autogen>
    <!-- Disable Command_R+P because proximity to Command+Bracket -->
    <autogen>
      __KeyToKey__
      KeyCode::P, ModifierFlag::COMMAND_R,
      KeyCode::VK_NONE
    </autogen>
  </item>
  <item>
    <name>Use Correct Command</name>
    <appendix>Forces use of Command_R as the correct Command for some keys on the left side.</appendix>
    <identifier>private.correct_command</identifier>
    <autogen>
      __KeyToKey__
      KeyCode::TAB, ModifierFlag::COMMAND_L,
      KeyCode::VK_NONE
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::Q, ModifierFlag::COMMAND_L,
      KeyCode::VK_NONE
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::W, ModifierFlag::COMMAND_L,
      KeyCode::VK_NONE
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::R, ModifierFlag::COMMAND_L,
      KeyCode::VK_NONE
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::T, ModifierFlag::COMMAND_L,
      KeyCode::VK_NONE
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::F, ModifierFlag::COMMAND_L,
      KeyCode::VK_NONE
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::C, ModifierFlag::COMMAND_L,
      KeyCode::VK_NONE
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::V, ModifierFlag::COMMAND_L,
      KeyCode::VK_NONE
    </autogen>
  </item>
  <item>
    <name>Shifts to Parentheses</name>
    <appendix>Shifts acts as parentheses when not used as modifiers.</appendix>
    <identifier>private.shifts_to_parens</identifier>

    <!-- Credits: @terryma https://github.com/terryma/dotfiles/blob/master/.KeyRemap4MacBook/private.xml -->

    <autogen>--KeyOverlaidModifier-- KeyCode::SHIFT_R, ModifierFlag::SHIFT_R | ModifierFlag::NONE, KeyCode::SHIFT_R, KeyCode::KEY_0, ModifierFlag::SHIFT_L</autogen>
    <autogen>--KeyOverlaidModifier-- KeyCode::SHIFT_L, ModifierFlag::SHIFT_L | ModifierFlag::NONE, KeyCode::SHIFT_L, KeyCode::KEY_9, ModifierFlag::SHIFT_R</autogen>

    <!--
      Remap the "rolls" of () and )( because it's too easy to hit one
      before finishing the other, and there's no other reason to be
      pressing both shift keys at once anyway.
    -->
    <autogen>--KeyToKey-- KeyCode::SHIFT_L, ModifierFlag::SHIFT_R, KeyCode::KEY_0, ModifierFlag::SHIFT_L, KeyCode::KEY_9, ModifierFlag::SHIFT_L</autogen>
    <autogen>--KeyToKey-- KeyCode::SHIFT_R, ModifierFlag::SHIFT_L, KeyCode::KEY_9, ModifierFlag::SHIFT_L, KeyCode::KEY_0, ModifierFlag::SHIFT_L</autogen>
  </item>
  <item>
    <name>Vim for Preview</name>
    <appendix>Provides some Vim-like bindings for Preview.</appendix>
    <identifier>private.vim_for_preview</identifier>
    <only>PREVIEW</only>
    <!-- Down with Ctrl+J -->
    <autogen>
      __KeyToKey__
      KeyCode::J, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_DOWN
    </autogen>
    <!-- Up with Ctrl+K -->
    <autogen>
      __KeyToKey__
      KeyCode::K, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_UP
    </autogen>
    <!-- Page Down with Ctrl+D -->
    <autogen>
      __KeyToKey__
      KeyCode::D, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_DOWN, ModifierFlag::OPTION_L
    </autogen>
    <!-- Page Up with Ctrl+U -->
    <autogen>
      __KeyToKey__
      KeyCode::U, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_UP, ModifierFlag::OPTION_L
    </autogen>
    <!-- Search with / -->
    <autogen>
      __KeyToKey__
      KeyCode::SLASH,
      KeyCode::F, ModifierFlag::COMMAND_L
    </autogen>
    <!-- Search Next with Ctrl+N -->
    <autogen>
      __KeyToKey__
      KeyCode::N, ModifierFlag::CONTROL_L,
      KeyCode::G, ModifierFlag::COMMAND_L
    </autogen>
    <!-- Search Previous with Ctrl+Shift+N -->
    <autogen>
      __KeyToKey__
      KeyCode::N, ModifierFlag::CONTROL_L | ModifierFlag::SHIFT_R,
      KeyCode::G, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_R
    </autogen>
    <!-- Go to Page with Ctrl+P -->
    <autogen>
      __KeyToKey__
      KeyCode::P, ModifierFlag::CONTROL_L,
      KeyCode::G, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R
    </autogen>
  </item>
  <item>
    <name>Vim for Finder</name>
    <appendix>Provides some Vim-like bindings for Finder.</appendix>
    <identifier>private.vim_for_finder</identifier>
    <only>FINDER</only>
    <!-- Down with Ctrl+J -->
    <autogen>
      __KeyToKey__
      KeyCode::J, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_DOWN
    </autogen>
    <!-- Up with Ctrl+K -->
    <autogen>
      __KeyToKey__
      KeyCode::K, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_UP
    </autogen>
    <!-- Close Folder with Ctrl+H -->
    <autogen>
      __KeyToKey__
      KeyCode::H, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_LEFT
    </autogen>
    <!-- Open Folder with Ctrl+L -->
    <autogen>
      __KeyToKey__
      KeyCode::L, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_RIGHT
    </autogen>
    <!-- Search with Ctrl+/ -->
    <autogen>
      __KeyToKey__
      KeyCode::SLASH, ModifierFlag::CONTROL_L,
      KeyCode::F, ModifierFlag::COMMAND_L
    </autogen>
    <!-- Search Next with Ctrl+N -->
    <autogen>
      __KeyToKey__
      KeyCode::N, ModifierFlag::CONTROL_L,
      KeyCode::G, ModifierFlag::COMMAND_L
    </autogen>
    <!-- Search Previous with Ctrl+Shift+N -->
    <autogen>
      __KeyToKey__
      KeyCode::N, ModifierFlag::CONTROL_L | ModifierFlag::SHIFT_R,
      KeyCode::G, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_R
    </autogen>
    <!-- Bottom of List with Ctrl+Shift+G -->
    <autogen>
      __KeyToKey__
      KeyCode::G, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT | ModifierFlag::CONTROL_L,
      KeyCode::Z, ModifierFlag::CONTROL_L
    </autogen>
    <!-- Top of List with Ctrl+G -->
    <autogen>
      __KeyToKey__
      KeyCode::G, ModifierFlag::CONTROL_L,
      KeyCode::DOT, ModifierFlag::CONTROL_L
    </autogen>
    <!-- Go to Enclosing Folder with Ctrl+Delete -->
    <autogen>
      __KeyToKey__
      KeyCode::DELETE, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_UP, ModifierFlag::COMMAND_L
    </autogen>
    <!-- Go to Folder with Ctrl+P -->
    <autogen>
      __KeyToKey__
      KeyCode::P, ModifierFlag::CONTROL_L,
      KeyCode::G, ModifierFlag::COMMAND_R | ModifierFlag::SHIFT_R
    </autogen>
  </item>
  <item>
    <name>Readline for Browsers</name>
    <appendix>Fills in some missing readline bindings for browsers.</appendix>
    <identifier>private.readline_for_browsers</identifier>
    <only>GOOGLE_CHROME,FIREFOX,SAFARI,OPERA</only>

    <!-- Note that Ctrl+A, Ctrl+E, Ctrl+B, Ctrl+F, Ctrl+H already work -->

    <!-- Delete Previous Word with Ctrl+W -->
    <autogen>
      __KeyToKey__
      KeyCode::W, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_LEFT, ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L,
      KeyCode::DELETE
    </autogen>
    <!-- Delete Line to Beginning with Ctrl+U -->
    <autogen>
      __KeyToKey__
      KeyCode::U, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L,
      KeyCode::DELETE
    </autogen>
    <!-- Go to End of Address Bar with Ctrl+R -->
    <autogen>
      __KeyToKey__
      KeyCode::R, ModifierFlag::CONTROL_L,
      KeyCode::L, ModifierFlag::COMMAND_L,
      KeyCode::CURSOR_RIGHT, ModifierFlag::COMMAND_L
    </autogen>
    <!-- Exit Address Bar with Ctrl+G -->
    <autogen>
      __KeyToKey__
      KeyCode::G, ModifierFlag::CONTROL_L,
      KeyCode::ESCAPE,
      KeyCode::TAB,
      KeyCode::TAB,
      KeyCode::ESCAPE
    </autogen>
  </item>
  <item>
    <name>Vim for browsers</name>
    <appendix>Provides some Vim-like bindings for browsers.</appendix>
    <identifier>private.vim_for_browsers</identifier>
    <only>GOOGLE_CHROME,FIREFOX,SAFARI,OPERA</only>

    <!-- Some sites override J and K bindings used in Vimium, so use these -->

    <!-- Left with Ctrl+H -->
    <autogen>
      __KeyToKey__
      KeyCode::H, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_LEFT
    </autogen>
    <!-- Down with Ctrl+J -->
    <autogen>
      __KeyToKey__
      KeyCode::J, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_DOWN
    </autogen>
    <!-- Up with Ctrl+K -->
    <autogen>
      __KeyToKey__
      KeyCode::K, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_UP
    </autogen>
    <!-- Right with Ctrl+L -->
    <autogen>
      __KeyToKey__
      KeyCode::L, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_RIGHT
    </autogen>
    <!-- Go to Address Bar with Ctrl+P -->
    <autogen>
      __KeyToKey__
      KeyCode::P, ModifierFlag::CONTROL_L,
      KeyCode::L, ModifierFlag::COMMAND_L
    </autogen>
    <!-- Yank with Ctrl+C -->
    <autogen>
      __KeyToKey__
      KeyCode::C, ModifierFlag::CONTROL_L,
      KeyCode::C, ModifierFlag::COMMAND_R
    </autogen>
    <!-- Yank Current Line with Ctrl+D -->
    <autogen>
      __KeyToKey__
      KeyCode::D, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L,
      KeyCode::CURSOR_RIGHT, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L,
      KeyCode::C, ModifierFlag::COMMAND_R
    </autogen>
    <!-- Yank Address Bar with Ctrl+Y -->
    <autogen>
      __KeyToKey__
      KeyCode::Y, ModifierFlag::CONTROL_L,
      KeyCode::L, ModifierFlag::COMMAND_R,
      KeyCode::C, ModifierFlag::COMMAND_R,
      KeyCode::TAB,
      KeyCode::TAB,
      KeyCode::ESCAPE
    </autogen>
    <!-- Paste with Ctrl+V -->
    <autogen>
      __KeyToKey__
      KeyCode::V, ModifierFlag::CONTROL_L,
      KeyCode::V, ModifierFlag::COMMAND_R
    </autogen>
    <!-- Back History with Ctrl+[ -->
    <autogen>
      __KeyToKey__
      KeyCode::BRACKET_LEFT, ModifierFlag::CONTROL_L,
      KeyCode::BRACKET_LEFT, ModifierFlag::COMMAND_R
    </autogen>
    <!-- Forward History with Ctrl+] -->
    <autogen>
      __KeyToKey__
      KeyCode::BRACKET_RIGHT, ModifierFlag::CONTROL_L,
      KeyCode::BRACKET_RIGHT, ModifierFlag::COMMAND_R
    </autogen>
  </item>
  <item>
    <name>Vim for Sublime Text</name>
    <appendix>Provides some Vim-like bindings for Sublime Text.</appendix>
    <identifier>private.vim_for_sublime_text</identifier>
    <only>SUBLIMETEXT</only>
    <!-- Ctrl+Cmd+P is Cmd+Shift+P -->
    <autogen>
      __KeyToKey__
      KeyCode::P, ModifierFlag::CONTROL_L | ModifierFlag::COMMAND_L,
      KeyCode::P, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L
    </autogen>
    <!-- Ctrl+P is Cmd+P -->
    <autogen>
      __KeyToKey__
      KeyCode::P, ModifierFlag::CONTROL_L,
      KeyCode::P, ModifierFlag::COMMAND_L
    </autogen>
  </item>
</root>
