<?xml version="1.0"?>
<root>
  <item>
    <name>Spotlight Mode</name>
    <appendix>Doubles the execution of Escape when Spotlight is enabled with Command+Space.</appendix>
    <identifier>private.spotlight_mode</identifier>

    <block>
      <!-- When Spotlight Mode is inactive  -->
      <config_not>notsave.private_spotlight_mode</config_not>

      <!-- PC Application Key acts as Ctrl or acts as Escape when not used as a modifier -->
      <autogen>
        __KeyOverlaidModifier__
        KeyCode::PC_APPLICATION,
        KeyCode::CONTROL_L,
        KeyCode::ESCAPE
      </autogen>

      <!-- Enable mode with Ctrl+Space -->
      <autogen>
        __KeyToKey__
        KeyCode::SPACE, ModifierFlag::CONTROL_L,

        KeyCode::SPACE, ModifierFlag::COMMAND_L,
        KeyCode::VK_CONFIG_FORCE_ON_notsave_private_spotlight_mode,
        Option::NOREPEAT
      </autogen>

      <!-- Enable mode with Cmd+Space -->
      <autogen>
        __KeyToKey__
        KeyCode::SPACE, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND,

        KeyCode::SPACE, ModifierFlag::COMMAND_L,
        KeyCode::VK_CONFIG_FORCE_ON_notsave_private_spotlight_mode,
        Option::NOREPEAT
      </autogen>
    </block>

    <block>
      <!-- When Spotlight Mode is active -->
      <config_only>notsave.private_spotlight_mode</config_only>

      <!-- Disable Mode with Return -->
      <autogen>
        __KeyToKey__
        KeyCode::RETURN,

        KeyCode::RETURN,
        KeyCode::VK_CONFIG_FORCE_OFF_notsave_private_spotlight_mode,
        Option::NOREPEAT
      </autogen>

      <!-- Close Spotlight and disable mode with Escape -->
      <autogen>
        __KeyToKey__
        KeyCode::ESCAPE,

        KeyCode::ESCAPE,
        KeyCode::ESCAPE,
        KeyCode::VK_CONFIG_FORCE_OFF_notsave_private_spotlight_mode,

        Option::NOREPEAT
      </autogen>

      <!--
        Close Spotlight and disable mode with PC_APPLICATION when
        not used as a modifier
      -->
      <autogen>
        __KeyOverlaidModifier__
        KeyCode::PC_APPLICATION,
        KeyCode::CONTROL_L,

        KeyCode::ESCAPE,
        KeyCode::ESCAPE,
        KeyCode::VK_CONFIG_FORCE_OFF_notsave_private_spotlight_mode,

        Option::NOREPEAT
      </autogen>

      <!-- Close Spotlight and disable mode with Ctrl+Space -->
      <autogen>
        __KeyToKey__
        KeyCode::SPACE, ModifierFlag::CONTROL_L,

        KeyCode::ESCAPE,
        KeyCode::ESCAPE,
        KeyCode::VK_CONFIG_FORCE_OFF_notsave_private_spotlight_mode,

        Option::NOREPEAT
      </autogen>

      <!-- Disable mode with Cmd+Space -->
      <autogen>
        __KeyToKey__
        KeyCode::SPACE, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND,

        KeyCode::ESCAPE,
        KeyCode::ESCAPE,
        KeyCode::VK_CONFIG_FORCE_OFF_notsave_private_spotlight_mode,

        Option::NOREPEAT
      </autogen>

      <!-- Down with Ctrl+J -->
      <autogen>
        __KeyToKey__
        KeyCode::J, ModifierFlag::CONTROL_L,
        KeyCode::CURSOR_DOWN
      </autogen>

      <!-- Up with Ctrl+K -->
      <autogen>
        __KeyToKey__
        KeyCode::K, ModifierFlag::CONTROL_L,
        KeyCode::CURSOR_UP
      </autogen>
    </block>
  </item>
  <item hidden="true">
    <identifier vk_config="true">notsave.private_spotlight_mode</identifier>
    <autogen>__ShowStatusMessage__ Spotlight Mode</autogen>
  </item>

  <item>
    <name>PC Application Key to Control or Escape</name>
    <appendix>PC Application Key acts as Control or acts as Escape when not used as a modifier.</appendix>
    <identifier>private.pc_application_to_escape</identifier>
    <autogen>
      __KeyOverlaidModifier__
      KeyCode::PC_APPLICATION,
      KeyCode::CONTROL_L,
      KeyCode::ESCAPE
    </autogen>
  </item>

  <item>
    <name>Chrome DevTools Shortcuts</name>
    <appendix>Provides some helpful bindings for Chrome DevTools.</appendix>
    <identifier>private.shortcuts_for_chrome_devtools</identifier>
    <only>GOOGLE_CHROME</only>

    <!-- Open JavaScript Console with Ctrl+I -->
    <autogen>
      __KeyToKey__
      KeyCode::I, ModifierFlag::CONTROL_L,
      KeyCode::J, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L
    </autogen>

    <!--
      Remap Command+Shift+Bracket to switch panels in DevTools before remapping
      the opposite for all tabbable apps in the following autogen.
    -->

    <!-- Alias for Bracket_L -->
    <autogen>
      __KeyToKey__
      KeyCode::BRACKET_LEFT, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L,
      KeyCode::BRACKET_LEFT, ModifierFlag::COMMAND_R
    </autogen>

    <!-- Alias for Bracket_R -->
    <autogen>
      __KeyToKey__
      KeyCode::BRACKET_RIGHT, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L,
      KeyCode::BRACKET_RIGHT, ModifierFlag::COMMAND_R
    </autogen>
  </item>

  <item>
    <name>Command+Bracket to Command+Shift+Bracket</name>
    <appendix>Aliases Command+Bracket as Command+Shift+Bracket for common tabbable apps.</appendix>
    <identifier>private.shortcut_command_shift_bracket</identifier>
    <only>TERMINAL,GOOGLE_CHROME,FIREFOX,SAFARI,OPERA,SUBLIMETEXT</only>

    <!-- Alias for Bracket_L -->
    <autogen>
      __KeyToKey__
      KeyCode::BRACKET_LEFT, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND | ModifierFlag::NONE,
      KeyCode::BRACKET_LEFT, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L
    </autogen>

    <!-- Alias for Bracket_R -->
    <autogen>
      __KeyToKey__
      KeyCode::BRACKET_RIGHT, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND | ModifierFlag::NONE,
      KeyCode::BRACKET_RIGHT, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L
    </autogen>

    <!-- Disable Cmd_R+P because proximity to Cmd+Bracket -->
    <autogen>
      __KeyToKey__
      KeyCode::P, ModifierFlag::COMMAND_R,
      KeyCode::VK_NONE
    </autogen>
  </item>

  <item>
    <name>Use Correct Command</name>
    <appendix>Forces use of Command_R as the correct Command for some keys on the left side.</appendix>
    <identifier>private.correct_command</identifier>
    <autogen>
      __KeyToKey__
      KeyCode::TAB, ModifierFlag::COMMAND_L,
      KeyCode::VK_NONE
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::Q, ModifierFlag::COMMAND_L,
      KeyCode::VK_NONE
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::W, ModifierFlag::COMMAND_L,
      KeyCode::VK_NONE
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::R, ModifierFlag::COMMAND_L,
      KeyCode::VK_NONE
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::T, ModifierFlag::COMMAND_L,
      KeyCode::VK_NONE
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::F, ModifierFlag::COMMAND_L,
      KeyCode::VK_NONE
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::C, ModifierFlag::COMMAND_L,
      KeyCode::VK_NONE
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::V, ModifierFlag::COMMAND_L,
      KeyCode::VK_NONE
    </autogen>
  </item>

  <item>
    <name>Shifts to Angle Brackets Mode</name>
    <appendix>Hold Comma+Command_R to toggle shifts to angle brackets.</appendix>
    <identifier>private.shifts_to_angle_brackets_mode</identifier>
    <block>
      <!-- When Shifts to Angle Brackets Mode is inactive  -->
      <config_not>notsave.private_shifts_to_angle_brackets_mode</config_not>

      <!-- Enable mode by holding Comma+Command+R -->
      <autogen>
        __HoldingKeyToKey__
        KeyCode::COMMA, ModifierFlag::COMMAND_R,
        KeyCode::COMMA, ModifierFlag::COMMAND_R,
        KeyCode::VK_NONE,
        KeyCode::VK_CONFIG_FORCE_ON_notsave_private_shifts_to_angle_brackets_mode,
        Option::NOREPEAT
      </autogen>
    </block>

    <block>
      <!-- When Shifts to Angle Brackets Mode is active  -->
      <config_only>notsave.private_shifts_to_angle_brackets_mode</config_only>

      <autogen>
        __KeyOverlaidModifier__
        KeyCode::SHIFT_R, ModifierFlag::SHIFT_R | ModifierFlag::NONE,
        KeyCode::SHIFT_R,
        KeyCode::DOT, ModifierFlag::SHIFT_L
      </autogen>
      <autogen>
        __KeyOverlaidModifier__
        KeyCode::SHIFT_L, ModifierFlag::SHIFT_L | ModifierFlag::NONE,
        KeyCode::SHIFT_L,
        KeyCode::COMMA, ModifierFlag::SHIFT_R
      </autogen>

      <!--
        Remap the "rolls" of <> and >< because it's too easy to hit one before
        finishing the other, and there's no other reason to be pressing both
        shift keys at once anyway.
      -->
      <autogen>
        __KeyToKey__
        KeyCode::SHIFT_L, ModifierFlag::SHIFT_R,
        KeyCode::DOT, ModifierFlag::SHIFT_L,
        KeyCode::COMMA, ModifierFlag::SHIFT_L
      </autogen>
      <autogen>
        __KeyToKey__
        KeyCode::SHIFT_R, ModifierFlag::SHIFT_L,
        KeyCode::COMMA, ModifierFlag::SHIFT_L,
        KeyCode::DOT, ModifierFlag::SHIFT_L
      </autogen>

      <!-- Disable mode by holding Comma+Command+R -->
      <autogen>
        __HoldingKeyToKey__
        KeyCode::COMMA, ModifierFlag::COMMAND_R,
        KeyCode::COMMA, ModifierFlag::COMMAND_R,
        KeyCode::VK_NONE,
        KeyCode::VK_CONFIG_FORCE_OFF_notsave_private_shifts_to_angle_brackets_mode,
        Option::NOREPEAT
      </autogen>
    </block>
  </item>
  <item hidden="true">
    <identifier vk_config="true">notsave.private_shifts_to_angle_brackets_mode</identifier>
    <autogen>__ShowStatusMessage__ Shifts to Angle Brackets Mode</autogen>
  </item>

  <item>
    <name>Shifts to Parentheses</name>
    <appendix>Shifts acts as parentheses when not used as modifiers.</appendix>
    <identifier>private.shifts_to_parens</identifier>

    <!-- Thanks: @terryma https://github.com/terryma/dotfiles/blob/master/.KeyRemap4MacBook/private.xml -->

    <autogen>
      __KeyOverlaidModifier__
      KeyCode::SHIFT_R, ModifierFlag::SHIFT_R | ModifierFlag::NONE,
      KeyCode::SHIFT_R,
      KeyCode::KEY_0, ModifierFlag::SHIFT_L
    </autogen>
    <autogen>
      __KeyOverlaidModifier__
      KeyCode::SHIFT_L, ModifierFlag::SHIFT_L | ModifierFlag::NONE,
      KeyCode::SHIFT_L,
      KeyCode::KEY_9, ModifierFlag::SHIFT_R
    </autogen>

    <!--
      Remap the "rolls" of () and )( because it's too easy to hit one before
      finishing the other, and there's no other reason to be pressing both
      shift keys at once anyway.
    -->
    <autogen>
      __KeyToKey__
      KeyCode::SHIFT_L, ModifierFlag::SHIFT_R,
      KeyCode::KEY_0, ModifierFlag::SHIFT_L,
      KeyCode::KEY_9, ModifierFlag::SHIFT_L
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::SHIFT_R, ModifierFlag::SHIFT_L,
      KeyCode::KEY_9, ModifierFlag::SHIFT_L,
      KeyCode::KEY_0, ModifierFlag::SHIFT_L
    </autogen>
  </item>

  <item>
    <name>Vim for Preview</name>
    <appendix>Provides some Vim-like bindings for Preview.</appendix>
    <identifier>private.vim_for_preview</identifier>
    <only>PREVIEW</only>

    <block>
      <!-- When Preview Search Mode is inactive -->
      <config_not>notsave.private_preview_search_mode</config_not>

      <!-- Down with J -->
      <autogen>
        __KeyToKey__
        KeyCode::J,
        KeyCode::CURSOR_DOWN
      </autogen>

      <!-- Up with K -->
      <autogen>
        __KeyToKey__
        KeyCode::K,
        KeyCode::CURSOR_UP
      </autogen>

      <!-- Page down with D -->
      <autogen>
        __KeyToKey__
        KeyCode::D,
        KeyCode::CURSOR_DOWN, ModifierFlag::OPTION_L
      </autogen>

      <!-- Page up with U -->
      <autogen>
        __KeyToKey__
        KeyCode::U,
        KeyCode::CURSOR_UP, ModifierFlag::OPTION_L
      </autogen>

      <!-- First page with G -->
      <autogen>
        __KeyToKey__
        KeyCode::G, ModifierFlag::NONE,

        KeyCode::G, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R,
        KeyCode::KEY_1,
        KeyCode::RETURN
      </autogen>

      <!-- Enter Preview Search Mode with / -->
      <autogen>
        __KeyToKey__
        KeyCode::SLASH,

        KeyCode::F, ModifierFlag::COMMAND_L,
        KeyCode::VK_CONFIG_FORCE_ON_notsave_private_preview_search_mode,

        Option::NOREPEAT
      </autogen>
    </block>

    <block>
      <!-- When Preview Search Mode is active -->
      <config_only>notsave.private_preview_search_mode</config_only>

      <!-- Down search results with Ctrl+J -->
      <autogen>
        __KeyToKey__
        KeyCode::J, ModifierFlag::CONTROL_L,
        KeyCode::CURSOR_DOWN
      </autogen>

      <!-- Up search results with Ctrl+K -->
      <autogen>
        __KeyToKey__
        KeyCode::K, ModifierFlag::CONTROL_L,
        KeyCode::CURSOR_UP
      </autogen>

      <!-- Search next with Ctrl+N -->
      <autogen>
        __KeyToKey__
        KeyCode::N, ModifierFlag::CONTROL_L,
        KeyCode::G, ModifierFlag::COMMAND_L
      </autogen>

      <!-- Search previous with Ctrl+Shift+N -->
      <autogen>
        __KeyToKey__
        KeyCode::N, ModifierFlag::CONTROL_L | ModifierFlag::SHIFT_R,
        KeyCode::G, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_R
      </autogen>

      <!--
        Disable Preview Search Mode and Escape from any part of the
        search input with Escape
      -->
      <autogen>
        __KeyToKey__
        KeyCode::ESCAPE,

        KeyCode::ESCAPE,
        KeyCode::TAB,
        KeyCode::TAB,
        KeyCode::ESCAPE,
        KeyCode::TAB,
        KeyCode::VK_CONFIG_FORCE_OFF_notsave_private_preview_search_mode,

        Option::NOREPEAT
      </autogen>
    </block>

    <!-- Go to page with Ctrl+P -->
    <autogen>
      __KeyToKey__
      KeyCode::P, ModifierFlag::CONTROL_L,
      KeyCode::G, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R
    </autogen>

    <!-- History back with Ctrl+[ -->
    <autogen>
      __KeyToKey__
      KeyCode::BRACKET_LEFT, ModifierFlag::CONTROL_L,
      KeyCode::BRACKET_LEFT, ModifierFlag::COMMAND_R
    </autogen>

    <!-- History forward with Ctrl+] -->
    <autogen>
      __KeyToKey__
      KeyCode::BRACKET_RIGHT, ModifierFlag::CONTROL_L,
      KeyCode::BRACKET_RIGHT, ModifierFlag::COMMAND_R
    </autogen>

    <!-- Disable Cmd+Bracket because Ctrl+Bracket is preferred -->
    <autogen>
      __KeyToKey__
      KeyCode::BRACKET_LEFT, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND,
      KeyCode::VK_NONE
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::BRACKET_RIGHT, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND,
      KeyCode::VK_NONE
    </autogen>
  </item>
  <item hidden="true">
    <identifier vk_config="true">notsave.private_preview_search_mode</identifier>
    <autogen>__ShowStatusMessage__ Preview Search Mode</autogen>
  </item>

  <item>
    <name>Vim for Finder</name>
    <appendix>Provides some Vim-like bindings for Finder.</appendix>
    <identifier>private.vim_for_finder</identifier>
    <only>FINDER</only>

    <!-- Down with Ctrl+J -->
    <autogen>
      __KeyToKey__
      KeyCode::J, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_DOWN
    </autogen>

    <!-- Up with Ctrl+K -->
    <autogen>
      __KeyToKey__
      KeyCode::K, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_UP
    </autogen>

    <!-- Close folder with Ctrl+H -->
    <autogen>
      __KeyToKey__
      KeyCode::H, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_LEFT
    </autogen>

    <!-- Open folder with Ctrl+L -->
    <autogen>
      __KeyToKey__
      KeyCode::L, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_RIGHT
    </autogen>

    <!-- Search with Ctrl+/ -->
    <autogen>
      __KeyToKey__
      KeyCode::SLASH, ModifierFlag::CONTROL_L,
      KeyCode::F, ModifierFlag::COMMAND_L
    </autogen>

    <!-- Search next with Ctrl+N -->
    <autogen>
      __KeyToKey__
      KeyCode::N, ModifierFlag::CONTROL_L,
      KeyCode::G, ModifierFlag::COMMAND_L
    </autogen>

    <!-- Search previous with Ctrl+Shift+N -->
    <autogen>
      __KeyToKey__
      KeyCode::N, ModifierFlag::CONTROL_L | ModifierFlag::SHIFT_R,
      KeyCode::G, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_R
    </autogen>

    <!-- Bottom of list with Ctrl+Shift+G -->
    <autogen>
      __KeyToKey__
      KeyCode::G, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT | ModifierFlag::CONTROL_L,
      KeyCode::Z, ModifierFlag::CONTROL_L
    </autogen>

    <!-- Top of list with Ctrl+G -->
    <autogen>
      __KeyToKey__
      KeyCode::G, ModifierFlag::CONTROL_L,
      KeyCode::DOT, ModifierFlag::CONTROL_L
    </autogen>

    <!-- Go to enclosing folder with Ctrl+Delete -->
    <autogen>
      __KeyToKey__
      KeyCode::DELETE, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_UP, ModifierFlag::COMMAND_L
    </autogen>

    <!-- Go to folder with Ctrl+P -->
    <autogen>
      __KeyToKey__
      KeyCode::P, ModifierFlag::CONTROL_L,
      KeyCode::G, ModifierFlag::COMMAND_R | ModifierFlag::SHIFT_R
    </autogen>

    <!-- History back with Ctrl+[ -->
    <autogen>
      __KeyToKey__
      KeyCode::BRACKET_LEFT, ModifierFlag::CONTROL_L,
      KeyCode::BRACKET_LEFT, ModifierFlag::COMMAND_R
    </autogen>

    <!-- History forward with Ctrl+] -->
    <autogen>
      __KeyToKey__
      KeyCode::BRACKET_RIGHT, ModifierFlag::CONTROL_L,
      KeyCode::BRACKET_RIGHT, ModifierFlag::COMMAND_R
    </autogen>
  </item>

  <item>
    <name>Readline for Browsers</name>
    <appendix>Fills in some missing readline-like bindings for browsers.</appendix>
    <identifier>private.readline_for_browsers</identifier>
    <only>GOOGLE_CHROME,FIREFOX,SAFARI,OPERA</only>

    <!-- Note that Ctrl+A, Ctrl+E, Ctrl+B, Ctrl+F, Ctrl+H already work -->

    <!-- Delete previous word with Ctrl+W -->
    <autogen>
      __KeyToKey__
      KeyCode::W, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_LEFT, ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L,
      KeyCode::DELETE
    </autogen>

    <!-- Delete line to beginning with Ctrl+U -->
    <autogen>
      __KeyToKey__
      KeyCode::U, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L,
      KeyCode::DELETE
    </autogen>

    <!-- Go to end of the address bar with Ctrl+R -->
    <autogen>
      __KeyToKey__
      KeyCode::R, ModifierFlag::CONTROL_L,
      KeyCode::L, ModifierFlag::COMMAND_L,
      KeyCode::CURSOR_RIGHT, ModifierFlag::COMMAND_L
    </autogen>

    <!-- Exit the address bar with Ctrl+G -->
    <autogen>
      __KeyToKey__
      KeyCode::G, ModifierFlag::CONTROL_L,

      <!-- KeyCode::ESCAPE, -->
      <!-- KeyCode::TAB, -->
      <!-- KeyCode::TAB, -->
      <!-- KeyCode::VK_WAIT_100MS, -->
      <!-- KeyCode::ESCAPE -->
      KeyCode::L, ModifierFlag::COMMAND_R,
      KeyCode::J,
      KeyCode::A,
      KeyCode::V,
      KeyCode::A,
      KeyCode::S,
      KeyCode::C,
      KeyCode::R,
      KeyCode::I,
      KeyCode::P,
      KeyCode::T,
      KeyCode::SEMICOLON,
      KeyCode::ENTER
    </autogen>
  </item>

  <item>
    <name>Vim for Browsers</name>
    <appendix>Provides some Vim-like bindings for browsers.</appendix>
    <identifier>private.vim_for_browsers</identifier>
    <only>GOOGLE_CHROME,FIREFOX,SAFARI,OPERA</only>

    <!-- Left with Ctrl+H -->
    <autogen>
      __KeyToKey__
      KeyCode::H, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_LEFT
    </autogen>

    <!-- Down with Ctrl+J -->
    <autogen>
      __KeyToKey__
      KeyCode::J, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_DOWN
    </autogen>

    <!-- Up with Ctrl+K -->
    <autogen>
      __KeyToKey__
      KeyCode::K, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_UP
    </autogen>

    <!-- Right with Ctrl+L -->
    <autogen>
      __KeyToKey__
      KeyCode::L, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_RIGHT
    </autogen>

    <!-- Go to the address bar with Ctrl+P -->
    <autogen>
      __KeyToKey__
      KeyCode::P, ModifierFlag::CONTROL_L,
      KeyCode::L, ModifierFlag::COMMAND_L
    </autogen>

    <!-- Yank with Ctrl+C -->
    <autogen>
      __KeyToKey__
      KeyCode::C, ModifierFlag::CONTROL_L,
      KeyCode::C, ModifierFlag::COMMAND_R
    </autogen>

    <!-- Yank current line with Ctrl+D -->
    <autogen>
      __KeyToKey__
      KeyCode::D, ModifierFlag::CONTROL_L,

      KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L,
      KeyCode::CURSOR_RIGHT, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L,
      KeyCode::C, ModifierFlag::COMMAND_R
    </autogen>

    <!-- Yank the address bar then exit with Ctrl+Y -->
    <autogen>
      __KeyToKey__
      KeyCode::Y, ModifierFlag::CONTROL_L,

      KeyCode::L, ModifierFlag::COMMAND_R,
      KeyCode::C, ModifierFlag::COMMAND_R,
      <!-- KeyCode::TAB, -->
      <!-- KeyCode::TAB, -->
      <!-- KeyCode::VK_WAIT_100MS, -->
      <!-- KeyCode::ESCAPE -->
      KeyCode::J,
      KeyCode::A,
      KeyCode::V,
      KeyCode::A,
      KeyCode::S,
      KeyCode::C,
      KeyCode::R,
      KeyCode::I,
      KeyCode::P,
      KeyCode::T,
      KeyCode::SEMICOLON,
      KeyCode::ENTER
    </autogen>

    <!-- Paste with Ctrl+V -->
    <autogen>
      __KeyToKey__
      KeyCode::V, ModifierFlag::CONTROL_L,
      KeyCode::V, ModifierFlag::COMMAND_R
    </autogen>

    <!-- History back with Ctrl+[ -->
    <autogen>
      __KeyToKey__
      KeyCode::BRACKET_LEFT, ModifierFlag::CONTROL_L,
      KeyCode::BRACKET_LEFT, ModifierFlag::COMMAND_R
    </autogen>

    <!-- History forward with Ctrl+] -->
    <autogen>
      __KeyToKey__
      KeyCode::BRACKET_RIGHT, ModifierFlag::CONTROL_L,
      KeyCode::BRACKET_RIGHT, ModifierFlag::COMMAND_R
    </autogen>

    <!-- Open a new tab and kill the last tab with Ctrl+Q -->
    <autogen>
      __KeyToKey__
      KeyCode::Q, ModifierFlag::CONTROL_L,

      KeyCode::T, ModifierFlag::COMMAND_R,
      KeyCode::BRACKET_LEFT, ModifierFlag::COMMAND_R | ModifierFlag::SHIFT_R,
      KeyCode::W, ModifierFlag::COMMAND_R
    </autogen>

    <!-- Duplicate the current tab with Ctrl+T -->
    <autogen>
      __KeyToKey__
      KeyCode::T, ModifierFlag::CONTROL_L,

      <!-- Yank the current address bar then exit -->
      KeyCode::L, ModifierFlag::COMMAND_R,
      KeyCode::C, ModifierFlag::COMMAND_R,
      <!-- KeyCode::TAB, -->
      <!-- KeyCode::TAB, -->
      <!-- KeyCode::VK_WAIT_100MS, -->
      <!-- KeyCode::ESCAPE, -->
      KeyCode::J,
      KeyCode::A,
      KeyCode::V,
      KeyCode::A,
      KeyCode::S,
      KeyCode::C,
      KeyCode::R,
      KeyCode::I,
      KeyCode::P,
      KeyCode::T,
      KeyCode::SEMICOLON,
      KeyCode::ENTER,

      <!-- Open a new tab and paste the address -->
      KeyCode::T, ModifierFlag::COMMAND_R,
      KeyCode::V, ModifierFlag::COMMAND_R,
      KeyCode::RETURN
    </autogen>

    <!--
      Position the mouse over a link and hold Command+R + . to copy it into
      the next href in Vim
    -->
    <autogen>
      __HoldingKeyToKey__
      KeyCode::DOT, ModifierFlag::COMMAND_R,
      KeyCode::DOT, ModifierFlag::COMMAND_R,
      KeyCode::VK_NONE,

      <!-- Wait to switch tabs and yank the address bar of the new tab -->
      KeyCode::VK_MOUSEKEY_BUTTON_MIDDLE,
      KeyCode::VK_WAIT_100MS,
      KeyCode::BRACKET_RIGHT, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L,
      KeyCode::VK_WAIT_100MS,
      KeyCode::L, ModifierFlag::COMMAND_R,
      KeyCode::C, ModifierFlag::COMMAND_R,
      KeyCode::VK_WAIT_100MS,

      <!-- Kill the current tab -->
      KeyCode::W, ModifierFlag::COMMAND_R,

      <!-- Switch to Terminal which needs to be the next application -->
      KeyCode::TAB, ModifierFlag::COMMAND_R,

      <!--
        And copy the contents of the clipboard into the first found href on
        the current line in Vim
      -->
      KeyCode::VK_WAIT_100MS,
      KeyCode::KEY_0,
      KeyCode::KEY_6, ModifierFlag::SHIFT_R,
      KeyCode::VK_WAIT_100MS,
      KeyCode::SLASH,
      KeyCode::H,
      KeyCode::R,
      KeyCode::E,
      KeyCode::F,
      KeyCode::RETURN,
      KeyCode::RETURN,
      KeyCode::F,
      KeyCode::QUOTE, ModifierFlag::SHIFT_R,
      KeyCode::V,
      KeyCode::I,
      KeyCode::QUOTE, ModifierFlag::SHIFT_R,
      KeyCode::P,
      KeyCode::J,

      <!-- Switch back to the browser when done -->
      KeyCode::TAB, ModifierFlag::COMMAND_R,

      Option::NOREPEAT
    </autogen>
  </item>

  <item>
    <name>Vim for Sublime Text</name>
    <appendix>Provides some Vim-like bindings for Sublime Text.</appendix>
    <identifier>private.vim_for_sublime_text</identifier>
    <only>SUBLIMETEXT</only>

    <!-- Ctrl+Cmd+P is Cmd+Shift+P -->
    <autogen>
      __KeyToKey__
      KeyCode::P, ModifierFlag::CONTROL_L | ModifierFlag::COMMAND_L,
      KeyCode::P, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L
    </autogen>

    <!-- Ctrl+P is Cmd+P -->
    <autogen>
      __KeyToKey__
      KeyCode::P, ModifierFlag::CONTROL_L,
      KeyCode::P, ModifierFlag::COMMAND_L
    </autogen>
  </item>

  <item>
    <name>Readline for Outlook</name>
    <appendix>Fills in some missing readline-like bindings for Outlook.</appendix>
    <identifier>private.readline_for_outlook</identifier>
    <only>OUTLOOK</only>

    <!-- Delete previous word with Ctrl+W -->
    <autogen>
      __KeyToKey__
      KeyCode::W, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_LEFT, ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L,
      KeyCode::DELETE
    </autogen>

    <!-- Delete line to beginning with Ctrl+U -->
    <autogen>
      __KeyToKey__
      KeyCode::U, ModifierFlag::CONTROL_L,
      KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L,
      KeyCode::DELETE
    </autogen>

    <!-- Add my signature with Ctrl+G -->
    <autogen>
      __KeyToKey__
      KeyCode::G, ModifierFlag::CONTROL_L,

      KeyCode::RETURN,
      KeyCode::BACKQUOTE, ModifierFlag::SHIFT_R,
      KeyCode::SPACE,
      KeyCode::G, ModifierFlag::SHIFT_R,
      KeyCode::R,
      KeyCode::E,
      KeyCode::G
    </autogen>
  </item>
</root>
